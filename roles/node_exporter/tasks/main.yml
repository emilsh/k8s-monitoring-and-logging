---
- name: Ensure node_exporter user exists
  ansible.builtin.user:
    name: "{{ node_exporter_user }}"
    state: present
    shell: /bin/false

- name: Create Node Exporter directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ node_exporter_user }}"
    group: "{{ node_exporter_group }}"
    mode: '0755'
  with_items:
    - "{{ node_exporter_config_dir }}"
    - "{{ node_exporter_data_dir }}"

- name: Download Node Exporter
  ansible.builtin.get_url:
    url: "{{ node_exporter_download_url }}"
    dest: "/tmp/node_exporter.tar.gz"
    mode: '0644'

- name: Extract Node Exporter archive
  ansible.builtin.unarchive:
    src: "/tmp/node_exporter.tar.gz"
    dest: "/opt"
    remote_src: yes

- name: Copy Node Exporter binary to /usr/local/bin
  ansible.builtin.copy:
    src: "/opt/node_exporter-{{ node_exporter_version }}.linux-amd64/node_exporter"
    dest: "/usr/local/bin/"
    mode: '0755'
    remote_src: yes

- name: Copy Node Exporter service file
  ansible.builtin.template:
    src: "node_exporter.service.j2"
    dest: "/etc/systemd/system/node_exporter.service"
    mode: '0644'
  notify: Reload systemd

- name: Start and enable Node Exporter service
  ansible.builtin.systemd:
    name: node_exporter
    enabled: yes
    state: started

- name: Update Prometheus configuration with new Node Exporter target
  ansible.builtin.template:
    src: "prometheus_static_config.yml.j2"
    dest: "{{ prometheus_config_dir }}/prometheus.yml"
    mode: '0644'
  delegate_to: "{{ prometheus_host }}"
  notify:
    - Reload Prometheus

# - name: Restart Prometheus service on remote Prometheus server
#   ansible.builtin.systemd:
#     name: prometheus
#     state: restarted
#   delegate_to: "{{ prometheus_host }}"
#   when: prometheus_reload_on_update
